from datetime import timedelta, datetime

from aiogram.filters.command import Command
from aiogram import types, F, Router, Bot, BaseMiddleware
from aiogram.fsm.context import FSMContext
from aiogram.types import InputFile, FSInputFile
from aiogram.utils.deep_linking import create_start_link, decode_payload, encode_payload
from arq import ArqRedis

from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message

from app.database.requests import *
from app.fns import fns_api
from app.utils import copy
from app.utils.state import User
from app.utils.utils import *
import app.keyboards.keyboard_main as kb
from decouple import config

ID_CHANNEL = int(config('ID_CHANNEL'))
ID_CHAT = int(config('ID_CHAT'))
synonyms = {'—è–±–ª–æ–∫–æ': '–ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ',
            '–ª—ç—Ç—É–∞–ª—å': '–õ—ç—Ç—É–∞–ª—å',
            '–º–∞–≥–Ω–∏—Ç': '–ú–∞–≥–Ω–∏—Ç',
            '—Ä–∏–≤': '–†–∏–≤ –ì–æ—à',
            'ozon': 'OZON',
            'wildberries': 'wildberries',
            '–∫—É–ø–µ—Ä': '–∫—É–ø–µ—Ä',
            '–º–µ–≥–∞–º–µ—Ä–∫–µ—Ç': '–º–µ–≥–∞–º–µ—Ä–∫–µ—Ç',
            None: '–î—Ä—É–≥–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã'}
router_main = Router()

class AntiManyReply(BaseMiddleware):
    def __init__(self) -> None:
        self.cache = set()

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        if event.chat.id in self.cache:
            return
        self.cache.add(event.chat.id)
        result = await handler(event, data)
        self.cache.remove(event.chat.id)
        return result

router_main.message.middleware(AntiManyReply())


@router_main.message(Command('statistics'))
async def cmd_message(message: types.Message, state: FSMContext, bot: Bot, command: Command):
    stats = await get_analytics()
    msg = f"""–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats[0]}
–ü—Ä–∏—à–µ–¥—à–∏—Ö –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ: {stats[1]}
–ü—Ä–∏—à–µ–¥—à–∏—Ö –∏–∑ sociallead: {stats[2]}
–ó–∞—Å—á–∏—Ç–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats[3]}
–ó–∞—Å—á–∏—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {stats[4]}
–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ —Å–∫–∏–Ω—É—Ç–æ: {stats[5]}
–°–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ –ø—Ä–∏–≤—è–∑–∞–ª–∏
{stats[6][0][0]}: {stats[6][0][1]}
{stats[6][1][0]}: {stats[6][1][1]}
{stats[6][2][0]}: {stats[6][2][1]}
{stats[6][3][0]}: {stats[6][3][1]}
–°–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –∑–∞–ª–µ—Ç–µ–ª–æ –ø–æ –∫–∞–∂–¥–æ–π —Å–æ—Ü —Å–µ—Ç–∏
{stats[7][0][0]}: {stats[7][0][1]}
{stats[7][1][0]}: {stats[7][1][1]}
{stats[7][2][0]}: {stats[7][2][1]}

–°–∫–æ–ª—å–∫–æ —á–µ–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ–≥–æ: {stats[8]}
–°–∫–æ–ª—å–∫–æ —á–µ–∫–æ–≤ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
{synonyms[stats[9][0][0]]}: {stats[9][0][1]}
{synonyms[stats[9][1][0]]}: {stats[9][1][1]}
{synonyms[stats[9][2][0]]}: {stats[9][2][1]}
{synonyms[stats[9][3][0]]}: {stats[9][3][1]}
{synonyms[stats[9][4][0]]}: {stats[9][4][1]}
{synonyms[stats[9][5][0]]}: {stats[9][5][1]}
{synonyms[stats[9][6][0]]}: {stats[9][6][1]}
{synonyms[stats[9][7][0]]}: {stats[9][7][1]}
{synonyms[stats[9][8][0]]}: {stats[9][8][1]}
–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±–± –ø–æ –≤—Å–µ–º —á–µ–∫–∞–º: {stats[10]}
–°–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –≤ –æ–±—â–µ–º –∑–∞—Å—á–∏—Ç–∞–ª–∏ –∑–∞ —á–µ–∫–∏: {stats[11]}
"""
    await message.answer(msg)


@router_main.message(Command("info_user"))
async def cmd_start(message: types.Message, state: FSMContext):
    _, user_id = message.text.split()
    logs = (await info_user(int(user_id)))[0]
    msg = ""
    for log in logs:
        msg += f"{log[0]}: {log[1]}\n"
    await message.answer(msg[:-1])
@router_main.message(Command('filter_account'))
async def cmd_message(message: types.Message, state: FSMContext, bot: Bot, command: Command):
    await message.answer("–°–∫–∏–Ω—å —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ç—å\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–ø–∏—à–∏ /end")
    await state.set_state(User.admin)

@router_main.message(Command('end'))
async def message(message: types.Message, state: FSMContext, bot: Bot, command: Command):
    ref = encode_payload(message.from_user.id)
    await message.answer(copy.menu_msg, reply_markup=kb.get_menu_btn(ref))
    await state.set_state(User.start)


@router_main.message(User.admin)
async def answer_message(message: types.Message, state: FSMContext):
    link = message.text.replace('https://', '')
    try:
        await add_social_network(message.from_user.id, "Bloger", link)
        await message.answer("–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–∫–∏–¥—ã–≤–∞—Ç—å\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–ø–∏—à–∏ /end")
    except:
        await message.answer("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É")
        await state.set_state(User.start)
        ref = encode_payload(message.from_user.id)
        await message.answer(copy.menu_msg, reply_markup=kb.get_menu_btn(ref))


@router_main.message(Command('new_list_posts'))
async def cmd_message(message: types.Message, state: FSMContext, bot: Bot, command: Command):
    posts_id = get_id_posts()
    posts_id = [str(elem) for elem in posts_id]
    await message.answer(" ".join(posts_id))
    await state.set_state(User.admin_new_posts)


@router_main.message(User.admin_new_posts)
async def message(message: types.Message, state: FSMContext):
    posts_id = message.text
    rewrite_id_posts(posts_id)
    ref = encode_payload(message.from_user.id)
    await message.answer(copy.menu_msg, reply_markup=kb.get_menu_btn(ref))
    await state.set_state(User.start)


@router_main.message(Command('start'))
async def cmd_message(message: types.Message, state: FSMContext, bot: Bot, command: Command):
    if message.from_user.id == message.chat.id:
        await state.set_state(User.start)
        args = command.args
        ref = 0
        if args and len(args) != 24:
            ref = decode_payload(args)
            if ref == str(message.from_user.id):  # –°–≤–æ—è –∂–µ —Ä–µ—Ñ–∫–∞
                ref = 0
            else:
                user_refs = await get_user(ref)  # –ï—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –≤ –±–¥ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ä–µ—Ñ–∫–∏
                if not user_refs:
                    ref = 0
        else:
            ref = 0

        user = await get_user(message.from_user.id)

        if not user:
            await bot.set_chat_menu_button(message.from_user.id, menu_button=kb.web_app_button)
            await message.answer(copy.start_msg)
            if args and len(args) == 24 and ref == 0:
                ref = 1
                api.postback(args)
            await add_user(message.from_user.id, message.from_user.first_name, message.from_user.username, int(ref))
        elif ref:
            await message.answer("–ù–µ –º–æ–≥—É –Ω–∞—á–∏—Å–ª–∏—Ç—å –í–í-–±–∞–ª–ª—ã –∑–∞ —Ç–≤–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω —Ç–æ–±–æ–π —Ä–∞–Ω–µ–µ üîó")

        ref = encode_payload(message.from_user.id)
        await message.answer(copy.menu_msg, reply_markup=kb.get_menu_btn(ref), menu_button=kb.web_app_button)


@router_main.callback_query(F.data == 'new_start')
async def answer_message(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    if callback.from_user.id == callback.message.chat.id:
        await state.set_state(User.start)
        ref = 0

        user = await get_user(callback.from_user.id)

        if not user:
            await bot.set_chat_menu_button(callback.from_user.id, menu_button=kb.web_app_button)
            await add_user(callback.from_user.id, callback.from_user.first_name, callback.from_user.username, int(ref))
        elif ref:
            await callback.message.answer("–ù–µ –º–æ–≥—É –Ω–∞—á–∏—Å–ª–∏—Ç—å –í–í-–±–∞–ª–ª—ã –∑–∞ —Ç–≤–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω —Ç–æ–±–æ–π —Ä–∞–Ω–µ–µ üîó")

        ref = encode_payload(callback.from_user.id)
        await callback.message.answer(copy.menu_msg, reply_markup=kb.get_menu_btn(ref))


@router_main.callback_query(F.data == 'menu')
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(User.start)
    ref = encode_payload(callback.from_user.id)
    await callback.message.answer(copy.menu_msg, reply_markup=kb.get_menu_btn(ref))

# ===========================================–ü–û–î–ï–õ–ò–¢–¨–°–Ø=========================================================
@router_main.callback_query(F.data == 'share')
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    ref = encode_payload(callback.from_user.id)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤–ª—è–π —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ BBCore —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∞–π 20 –í–í-–±–∞–ª–ª–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ ‚úåüèª", reply_markup=kb.get_share_btn(ref))



# ===========================================–ß–ï–ö=========================================================
@router_main.callback_query(F.data == 'receipt')
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(User.load_image_check)
    await callback.message.answer(copy.check_start_msg,
                                  reply_markup=kb.single_menu_btn)


@router_main.message(User.load_image_check, F.photo)
async def answer_message(message: types.Message, state: FSMContext):
    count_check = (await state.get_data())
    if not count_check.get('count_check'):
        count_check = 0
    else:
        count_check = count_check.get('count_check')
    await message.bot.download(file=message.photo[-1].file_id, destination=f'users_check/{message.from_user.id}.jpg')
    id_check, data_check = read_qrcode(message.from_user.id)

    if id_check:
        dead_date = datetime.strptime("20241105", "%Y%m%d")
        check_date = datetime.strptime(id_check[0:8], "%Y%m%d")
        if (check_date - dead_date).days < 0:
            await message.answer(
                "–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, —Ç–≤–æ–π —á–µ–∫ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π üíî –û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–µ–∂–∏–π —á–µ–∫, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–≥–æ ‚úçüèª",
                reply_markup=kb.single_menu_btn)
            return
        res = await get_check(id_check)
        if res:
            await message.answer("–≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏—Å–ª–∞—Ç—å –¥—Ä—É–≥–æ–π üôå",
                                 reply_markup=kb.single_menu_btn)
        else:
            # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å. –¢–∞–∫ –∂–µ –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å API –§–ù–°.
            items, retail_place = fns_api.get_items_check(data_check)
            if items is None:
                await message.answer("–û—Ö, –∫–∞–∂–µ—Ç—Å—è, –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∏!\n\n–°–µ–≥–æ–¥–Ω—è –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å —Ç–≤–æ–π —á–µ–∫, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∑–∞–≤—Ç—Ä–∞ ü´∂",
                                     reply_markup=kb.single_menu_btn)
            else:
                n_point, sum_bb = check_items(items)
                if n_point is None:
                    await add_check(id_check)
                    await message.answer("–í —ç—Ç–æ–º —á–µ–∫–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç Beauty Bomb üòî –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏—Å–ª–∞—Ç—å –¥—Ä—É–≥–æ–π —á–µ–∫!",
                                         reply_markup=kb.single_menu_btn)
                else:
                    api.add_points(message.from_user.id, n_point)
                    await insert_point_log(message.from_user.id, "—á–µ–∫", n_point, check_id=id_check)
                    retail_name = get_name_retail(retail_place.lower())
                    await add_check(id_check, retail_name, sum_bb, n_point)
                    await message.answer("–ü—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–≤–æ—è –∫–æ–ø–∏–ª–∫–∞ –í–í-–±–∞–ª–ª–æ–≤ –ø–æ–ø–æ–ª–Ω–∏–ª–∞—Å—å ü•≥")
                    await state.set_state(User.start)
                    ref = encode_payload(message.from_user.id)
                    await message.answer(copy.menu_msg, reply_markup=kb.get_menu_btn(ref))
                    await state.set_data({'count_check': 0})
    else:
        count_check += 1
        await state.set_data({'count_check': count_check})

        if count_check >= 3:
            await message.answer("–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, —è –Ω–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Ç–≤–æ—ë–º —á–µ–∫–µ ü•≤\n\n–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —á–µ–∫–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–∞–ª–µ–µ‚ù§Ô∏è")
            await message.answer_photo(FSInputFile("users_check/check_example.png"))

            await message.answer("–£–∫–∞–∂–∏ —Ç–æ—á–Ω—É—é –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ –∏ –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏ (–¥–¥.–º–º.–≥–≥ —á—á:–º–º) üï∞")

            await state.set_state(User.check_date)
            await state.set_data({'count_check': 0})
        else:
            await message.answer("–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR-–∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üîç",
                                 reply_markup=kb.single_menu_btn)

@router_main.message(User.check_date, F.text)
async def answer_message(message: types.Message, state: FSMContext):
    date_text = message.text.split()
    if len(date_text) != 2 or len(date_text[1].split(':')) != 2:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    else:
        day, month, year = date_text[0].split('.')
        date = f"20{year}-{month}-{day}T{date_text[1]}:00"

        dead_date = datetime.strptime("20241105", "%Y%m%d")
        check_date = datetime.strptime(date[0:10], "%Y-%m-%d")
        if (check_date - dead_date).days < 0:
            await message.answer(
                "–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, —Ç–≤–æ–π —á–µ–∫ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π üíî –û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–µ–∂–∏–π —á–µ–∫, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–≥–æ ‚úçüèª",
                reply_markup=kb.single_menu_btn)
            return

        await state.set_data({"data_check": [date]})
        await message.answer("–£–∫–∞–∂–∏ —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–π —Ç–æ—á–Ω—É—é —Å—É–º–º—É —Å –∫–æ–ø–µ–π–∫–∞–º–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É ¬´.¬ª¬†üíï")
        await state.set_state(User.check_summ)


@router_main.message(User.check_summ, F.text)
async def answer_message(message: types.Message, state: FSMContext):
    sum_text = message.text
    if not '.' in sum_text:
        sum_text += ".00"
    data_check = (await state.get_data())['data_check']
    data_check.append(sum_text)
    await state.set_data({'data_check': data_check})
    await message.answer("–£–∫–∞–∂–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:¬†–§–ù")
    await state.set_state(User.check_fn)

@router_main.message(User.check_fn, F.text)
async def answer_message(message: types.Message, state: FSMContext):
    fn = message.text
    data_check = (await state.get_data())['data_check']
    data_check.append(fn)
    await state.set_data({'data_check': data_check})
    await message.answer("–£–∫–∞–∂–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:¬†–§–î")
    await state.set_state(User.check_fd)

@router_main.message(User.check_fd, F.text)
async def answer_message(message: types.Message, state: FSMContext):
    fd = message.text
    data_check = (await state.get_data())['data_check']
    data_check.append(fd)
    await state.set_data({'data_check': data_check})
    await message.answer("–£–∫–∞–∂–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:¬†–§–ü")
    await state.set_state(User.check_fs)

@router_main.message(User.check_fs, F.text)
async def answer_message(message: types.Message, state: FSMContext):
    fs = message.text
    data_check = (await state.get_data())['data_check']
    data_check.append(fs)
    data_check.append('1')
    id_check = data_check[0].replace('-', '').replace(':', '')[:-2] + data_check[3] + data_check[4]
    res = await get_check(id_check)
    if res:
        await message.answer("–≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏—Å–ª–∞—Ç—å –¥—Ä—É–≥–æ–π üôå",
                             reply_markup=kb.single_menu_btn)
    else:
        items, retail_place = fns_api.get_items_check(data_check)
        if items is None:
            await message.answer("–ú–Ωe –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–µ–∫, –≤–æ–∑–º–æ–∂–Ω–æ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ üîç",
                                 reply_markup=kb.single_menu_btn)
        else:
            n_point, sum_bb = check_items(items)
            if n_point is None:
                await add_check(id_check)
                await message.answer("–í —ç—Ç–æ–º —á–µ–∫–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç Beauty Bomb üòî –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏—Å–ª–∞—Ç—å –¥—Ä—É–≥–æ–π —á–µ–∫!",
                                     reply_markup=kb.single_menu_btn)
            else:
                api.add_points(message.from_user.id, n_point)
                await insert_point_log(message.from_user.id, "—á–µ–∫", n_point, check_id=id_check)
                retail_name = get_name_retail(retail_place.lower())
                await add_check(id_check, retail_name, sum_bb, n_point)
                await message.answer("–ü—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–≤–æ—è –∫–æ–ø–∏–ª–∫–∞ –í–í-–±–∞–ª–ª–æ–≤ –ø–æ–ø–æ–ª–Ω–∏–ª–∞—Å—å ü•≥")
    await state.set_state(User.start)
    ref = encode_payload(message.from_user.id)
    await message.answer(copy.menu_msg, reply_markup=kb.get_menu_btn(ref))

# ================================–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø–æ—Å—Ç–µ===================================================
@router_main.callback_query(F.data == 'mention')
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(copy.mention_msg,
                                  reply_markup=kb.single_menu_btn)
    await state.set_state(User.wait_repost)


@router_main.message(User.wait_repost, F.forward_from_chat[F.type == "channel"].as_("channel"),
                     ((F.text) | (F.caption)))
async def answer_message(message: types.Message, state: FSMContext):
    await state.set_state(User.start)
    if message.text:
        text = message.text.lower()
    else:
        text = message.caption.lower()
    id_post = message.forward_from_message_id
    id_channel = message.forward_from_chat.id
    channel = await get_channel(id_channel)
    if not channel:
        await add_channel(id_channel)
        count_post = 0
    else:
        if not channel.tg_id:
            await update_tg_id_channel(id_channel, message.from_user.id)
        count_post = channel.number_post
    post = await get_post(id_channel, id_post)
    if id_post < 30:
        await message.answer(copy.error_post_msg)
        await message.answer("–ù–µ –º–æ–≥—É –Ω–∞—á–∏—Å–ª–∏—Ç—å –í–í-–±–∞–ª–ª—ã –∑–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 30-–º –Ω–∞ —Ç–≤–æ—ë–º –∫–∞–Ω–∞–ª–µ ü•∫üíô")
    elif bb_post_check(text):
        await message.answer("–ù–µ –º–æ–≥—É –Ω–∞—á–∏—Å–ª–∏—Ç—å –í–í-–±–∞–ª–ª—ã –∑–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç, –≤–µ–¥—å –≤ –Ω—ë–º –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è Beauty Bomb ü•π")
    elif count_post >= 3:
        await message.answer("–ù–µ –º–æ–≥—É –Ω–∞—á–∏—Å–ª–∏—Ç—å –í–í-–±–∞–ª–ª—ã –∑–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç, —Ç–∞–∫ –∫–∞–∫ —Ç—ã –ø—Ä–∏—Å–ª–∞–ª–∞ —É–∂–µ —Ç—Ä–∏ –ø–æ—Å—Ç–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ ü•∫\n–ü—Ä–∏—à–ª–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 20 –í–í-–±–∞–ª–ª–æ–≤!")
    elif post:
        await message.answer("–ù–µ –º–æ–≥—É –Ω–∞—á–∏—Å–ª–∏—Ç—å –í–í-–±–∞–ª–ª—ã –∑–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∑–∞ –Ω–µ–≥–æ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ü•∫")
    else:
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞ —Å–≤–æ–∏ 20 –í–í-–±–∞–ª–ª–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç–∏–∫ üíô")
        await add_post(id_channel, id_post)
        await add_number_post_channel(id_channel)
        api.add_points(message.from_user.id, 20)
        await insert_point_log(message.from_user.id, "–ø–æ—Å—Ç", 20, channel_id=id_channel)

    await add_count_channel_post(id_channel)
    ref = encode_payload(message.from_user.id)
    await message.answer(copy.menu_msg, reply_markup=kb.get_menu_btn(ref))


@router_main.message(User.wait_repost, ((F.text) | (F.caption)))
async def answer_message(message: types.Message, state: FSMContext):
    await message.answer('–ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞', reply_markup=kb.single_menu_btn)


# ===========================================–ö–æ–Ω–∫—É—Ä—Å=========================================================
@router_main.callback_query((F.data == 'contest') | (F.data == 'back'))
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(User.start)
    btns, check = await kb.get_sn_btn(callback.from_user.id)
    if check:
        msg = copy.sn_msg
    else:
        msg = copy.new_sn_msg

    await callback.message.answer(msg, reply_markup=btns)


@router_main.callback_query(F.data.contains('my'))
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    sn = callback.data.split('_')[1]
    link = (await get_social_network(callback.from_user.id, sn)).social_network_link
    msg = f"–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:\n{link}"
    await state.set_data({'link': link, 'name_sn': sn})
    await callback.message.answer(msg, reply_markup=kb.sn_link_btn, disable_web_page_preview=True)


@router_main.callback_query(F.data == 'disconnection')
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    msg = f"–¢—ã —É–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç? ü§î"
    await callback.message.answer(msg, reply_markup=kb.sure_btn)


@router_main.callback_query(F.data == 'yes_sure')
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    name_sn = (await state.get_data())['name_sn']
    await del_social_networks(callback.from_user.id, name_sn)
    btns, check = await kb.get_sn_btn(callback.from_user.id)
    if check:
        msg = copy.sn_msg
    else:
        msg = copy.new_sn_msg

    await callback.message.answer(msg, reply_markup=btns)


@router_main.callback_query(F.data.contains('connect'))
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    sn = callback.data.split('_')[1]
    msg = f"–ö–∏–¥–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç üîó"
    await callback.message.answer(msg, reply_markup=kb.single_menu_btn)
    await state.set_state(User.wait_link)
    await state.set_data({"connect": sn})


@router_main.message(User.wait_link)
async def answer_message(message: types.Message, state: FSMContext):
    await state.set_state(User.start)
    sn = (await state.get_data())['connect']
    link = message.text.replace('https://', '')
    result = await search_sn_link(link)
    if not sn.lower() in link.lower():
        msg = """–°—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç!\n–£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–æ—Ü—Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã–±—Ä–∞–ª–∞‚õìÔ∏è‚Äçüí•"""
        await message.answer(msg)
    elif result:
        msg = """–°—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç!\n–£–±–µ–¥–∏—Å—å, —á—Ç–æ–±—ã —ç—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ —Å –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã‚õìÔ∏è‚Äçüí•"""
        await message.answer(msg)
    else:
        await add_social_network(message.from_user.id, sn, link)
        msg = f"–°—É–ø–µ—Ä! –¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∫–æ –º–Ω–µ ü©∑"
        await message.answer(msg)

    btns, check = await kb.get_sn_btn(message.from_user.id)

    if check:
        msg = copy.sn_msg
    else:
        msg = copy.new_sn_msg

    await message.answer(msg, reply_markup=btns)


@router_main.callback_query(F.data == 'flood')
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(User.wait_link_video)
    msg = "–£—Ä–∞! –û—á–µ–Ω—å —Ä–∞–¥ –∑–∞ —Ç–µ–±—è üíã\n\n–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç –∏ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—Å—ë —Å—É–ø–µ—Ä ‚Äî –Ω–∞—á–∏—Å–ª—è—Ç —Ç–µ–±–µ –±–∞–ª–ª—ã üòÆ‚Äçüí®"
    await callback.message.answer(msg, reply_markup=kb.single_back_btn)


@router_main.message(User.wait_link_video)
async def answer_message(message: types.Message, state: FSMContext, bot: Bot):
    await state.set_state(User.start)
    data_state = await state.get_data()
    sn = data_state['name_sn']
    link = data_state['link']
    link_video = message.text.replace('https://', '')
    result = await search_link_video(link_video)
    if not sn.lower() in link_video.lower():
        msg = """–£–ø—Å! –í–∏–¥–µ–æ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æüò≠\n\n–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –ø—Ä–∏—Å–ª–∞–ª–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞–Ω–µ–µ —Å–æ—Ü—Å–µ—Ç–∏ üîç"""
        await message.answer(msg)
    elif result:
        msg = """–£–ø—Å! –í–∏–¥–µ–æ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æüò≠\n\n–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ–±—ã —ç—Ç–∞ —Å—Å—ã–ª–∫–∞ –µ—â—ë –Ω–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–∞–Ω–µ–µ üîç"""
        await message.answer(msg)
    else:
        await add_link_video(message.from_user.id, link_video)
        msg = f"–¢–≤–æ—ë –≤–∏–¥–µ–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å ‚åõÔ∏è"
        await message.answer(msg)

        msg = f"""
–í–∏–¥–µ–æ {sn} –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
{message.from_user.id}
{message.from_user.first_name}
{message.from_user.username}
–°—Å—ã–ª–∫–∞ –Ω–∞ {link}

{link_video}   
        """

        await bot.send_message(-1002475070676,
                               msg,
                               reply_markup=kb.get_points_btn(message.from_user.id, sn),
                               disable_web_page_preview=True)

    btns, check = await kb.get_sn_btn(message.from_user.id)

    msg = copy.sn_msg

    await message.answer(msg, reply_markup=btns)


@router_main.callback_query(F.data.contains('points'))
async def answer_message(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    _, sn, points, tg_id = callback.data.split('__')
    await callback.message.edit_reply_markup()
    if points == '0':
        await bot.send_message(tg_id, copy.cancel_msg)
    else:
        msg = f"–ú–æ–ª–æ–¥–µ—Ü! –¢–µ–±–µ —É–∂–µ –∑–∞—á–∏—Å–ª–∏–ª–∏ –±–∞–ª–ª—ã –∑–∞ —ç—Ç–æ—Ç –≤–∏–¥–æ—Å–∏–∫, –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å üòà"
        await update_number_accept_video(sn)
        await bot.send_message(tg_id, msg)
        api.add_points(int(tg_id), int(points))
        await insert_point_log(tg_id, "–≤–∏–¥–µ–æ", int(points))


# ===========================================–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ —á–∞—Ç–∞========================================================


@router_main.channel_post(F.chat.id == ID_CHANNEL)
async def answer_message(message: types.Message):
    if not message.pinned_message and (message.text or message.caption):
        print("–ù–æ–≤—ã–π –ø–æ—Å—Ç")
        add_new_id_post(message.message_id)


@router_main.message(F.chat.id == ID_CHAT, F.text, F.reply_to_message, F.from_user.is_bot == False)  # ID –ß–ê–¢–ê
async def answer_message(message: types.Message, state: FSMContext, bot: Bot, arqredis: ArqRedis):
    try:
        print(list_channel_message)
        user = await get_user(message.from_user.id)
        if message.reply_to_message.forward_origin and (message.reply_to_message.forward_origin.message_id in list_channel_message) and user and not user.send_comment:
            print(message.reply_to_message.forward_origin.message_id)
            await bot.send_message(message.from_user.id, copy.comment_msg)
            api.add_points(message.from_user.id, 10)
            await insert_point_log(message.from_user.id, "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", 10)
            await user_send_comment(message.from_user.id)
            await arqredis.enqueue_job(
                'reset_send_comment', _defer_by=timedelta(hours=1), telegram_id=message.from_user.id
            )
    except Exception as e:
       print(e)

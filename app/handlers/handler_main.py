from datetime import timedelta

from aiogram import Router
from aiogram.filters.command import Command
from aiogram import types, F, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.utils.deep_linking import create_start_link, decode_payload, encode_payload
from arq import ArqRedis

from app.database.requests import *
from app.utils.state import User
from app.utils.utils import *
import app.keyboards.keyboard_main as kb
from decouple import config

ID_CHANNEL = int(config('ID_CHANNEL'))
ID_CHAT = int(config('ID_CHAT'))
router_main = Router()


@router_main.message(Command('test'))
async def cmd_message(message: types.Message, state: FSMContext, bot: Bot, command: Command):
    if message.from_user.id == message.chat.id:
        await state.set_state(User.start)
        args = command.args
        if args:
            ref = decode_payload(args)
            if ref == str(message.from_user.id):  # –°–≤–æ—è –∂–µ —Ä–µ—Ñ–∫–∞
                ref = 0
            else:
                user_refs = await get_user(ref)  # –ï—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –≤ –±–¥ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ä–µ—Ñ–∫–∏
                if not user_refs:
                    ref = 0
        else:
            ref = 0

        user = await get_user(message.from_user.id)

        if not user:
            await bot.set_chat_menu_button(message.from_user.id, menu_button=kb.web_app_button)
            await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
            await add_user(message.from_user.id, message.from_user.first_name, message.from_user.username, int(ref))
        elif ref:
            await message.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º, —Ç–∫ –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

        ref = encode_payload(message.from_user.id)
        await message.answer('–ú–µ–Ω—é', reply_markup=kb.get_menu_btn(ref))


@router_main.callback_query(F.data == 'menu')
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(User.start)
    ref = encode_payload(callback.from_user.id)
    await callback.message.answer('–ú–µ–Ω—é', reply_markup=kb.get_menu_btn(ref))


# ===========================================–ß–ï–ö=========================================================
# @router_main.callback_query(F.data == 'receipt')
# async def answer_message(callback: types.CallbackQuery, state: FSMContext):
#     await state.set_state(User.load_image_check)
#     await callback.message.answer("–ó–∞–≥—Ä—É–∑–∏ —á—ë—Ç–∫—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –∫—É–∞—Ä-–∫–æ–¥",
#                                   reply_markup=kb.single_menu_btn)


# @router_main.message(User.load_image_check, F.photo)
# async def answer_message(message: types.Message, state: FSMContext):
#     await message.bot.download(file=message.photo[-1].file_id, destination=f'users_check/{message.from_user.id}.jpg')
#     id_check = read_qrcode(message.from_user.id)
#     if id_check:
#         res = await get_check(id_check)
#         if res:
#             await message.answer("–ß–µ–∫ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏ –¥–æ —ç—Ç–æ–≥–æ\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —á–µ–∫",
#                                  reply_markup=kb.single_menu_btn)
#         else:
#             await add_check(id_check)
#
#             # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å. –¢–∞–∫ –∂–µ –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å API –§–ù–°.
#
#             await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞ –•–• –±–∞–ª–ª–æ–≤")
#             await state.set_state(User.start)
#             ref = encode_payload(message.from_user.id)
#             await message.answer('–ú–µ–Ω—é', reply_markup=kb.get_menu_btn(ref))
#     else:
#         await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫—É–∞—Ä-–∫–æ–¥\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑",
#                              reply_markup=kb.single_menu_btn)


# ================================–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø–æ—Å—Ç–µ===================================================
@router_main.callback_query(F.data == 'mention')
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–µ—Ä–µ—à–ª–∏ —Å—é–¥–∞ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞",
                                  reply_markup=kb.single_menu_btn)
    await state.set_state(User.wait_repost)


@router_main.message(User.wait_repost, F.forward_from_chat[F.type == "channel"].as_("channel"),
                     ((F.text) | (F.caption)))
async def answer_message(message: types.Message, state: FSMContext):
    if message.text:
        text = message.text.lower()
    else:
        text = message.caption.lower()
    id_post = message.forward_from_message_id
    id_channel = message.forward_from_chat.id
    channel = await get_channel(id_channel)
    if not channel:
        await add_channel(id_channel)
        count_post = 0
    else:
        count_post = channel.number_post
    post = await get_post(id_channel, id_post)

    if id_post <= 30:
        await message.answer("–ú–∞–ª–µ–Ω—å–∫–∞—è –≥—Ä—É–ø–ø–∞, –º–µ–Ω—å—à–µ 30 –ø–æ—Å—Ç–æ–≤")
    elif bb_post_check(text):
        await message.answer("–í –ø–æ—Å—Ç–µ –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    elif count_post >= 3:
        await message.answer("–ó–∞ –Ω–µ–¥–µ–ª—é —É–∂–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ 3 –ø–æ—Å—Ç–∞")
    elif post:
        await message.answer("–î–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —É–∂–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç")
    else:
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞ —Å–≤–æ–∏ 20 –í–í-–±–∞–ª–ª–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç–∏–∫ üíô")
        await add_post(id_channel, id_post)
        await add_number_post_channel(id_channel)
        api.add_points(message.from_user.id, 40)

    await state.set_state(User.start)
    ref = encode_payload(message.from_user.id)
    await message.answer('–ú–µ–Ω—é', reply_markup=kb.get_menu_btn(ref))


@router_main.message(User.wait_repost, ((F.text) | (F.caption)))
async def answer_message(message: types.Message, state: FSMContext):
    await message.answer('–ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞', reply_markup=kb.single_menu_btn)


# ===========================================–ö–æ–Ω–∫—É—Ä—Å=========================================================
@router_main.callback_query((F.data == 'contest') | (F.data == 'back'))
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(User.start)
    btns, check = await kb.get_sn_btn(callback.from_user.id)
    if check:
        msg = """–ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ‚ú®"""
    else:
        msg = """–ü—Ä–∏–≤—è–∂–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∫–æ –º–Ω–µ –∏ –¥–∞–π –∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –∑–∞–ª–µ—Ç–∏—Ç!"""

    await callback.message.answer(msg, reply_markup=btns)


@router_main.callback_query(F.data.contains('my'))
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    sn = callback.data.split('_')[1]
    link = (await get_social_network(callback.from_user.id, sn)).social_network_link
    msg = f"–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:\n{link}"
    await state.set_data({'link': link, 'name_sn': sn})
    await callback.message.answer(msg, reply_markup=kb.sn_link_btn, disable_web_page_preview=True)


@router_main.callback_query(F.data == 'disconnection')
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    msg = f"–£–≤–µ—Ä–µ–Ω–∞?"
    await callback.message.answer(msg, reply_markup=kb.sure_btn)


@router_main.callback_query(F.data == 'yes_sure')
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    name_sn = (await state.get_data())['name_sn']
    await del_social_networks(callback.from_user.id, name_sn)
    btns, check = await kb.get_sn_btn(callback.from_user.id)
    if check:
        msg = """–ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ‚ú®"""
    else:
        msg = """–ü—Ä–∏–≤—è–∂–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∫–æ –º–Ω–µ –∏ –¥–∞–π –∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –∑–∞–ª–µ—Ç–∏—Ç!"""

    await callback.message.answer(msg, reply_markup=btns)


@router_main.callback_query(F.data.contains('connect'))
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    sn = callback.data.split('_')[1]
    msg = f"–ö–∏–¥–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç üîó"
    await callback.message.answer(msg, reply_markup=kb.single_menu_btn)
    await state.set_state(User.wait_link)
    await state.set_data({"connect": sn})


@router_main.message(User.wait_link)
async def answer_message(message: types.Message, state: FSMContext):
    await state.set_state(User.start)
    sn = (await state.get_data())['connect']
    link = message.text.replace('https://', '')
    result = await search_sn_link(link)
    if not sn.lower() in link.lower():
        msg = """–°—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç!\n–£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–æ—Ü—Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã–±—Ä–∞–ª–∞‚õìÔ∏è‚Äçüí•"""
        await message.answer(msg)
    elif result:
        msg = """–°—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç!\n–£–±–µ–¥–∏—Å—å, —á—Ç–æ–±—ã —ç—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ —Å –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã‚õìÔ∏è‚Äçüí•"""
        await message.answer(msg)
    else:
        await add_social_network(message.from_user.id, sn, link)
        msg = f"–°—É–ø–µ—Ä! –¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∫–æ –º–Ω–µ ÁîÜ"
        await message.answer(msg)

    btns, check = await kb.get_sn_btn(message.from_user.id)

    if check:
        msg = """–ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ‚ú®"""
    else:
        msg = """–ü—Ä–∏–≤—è–∂–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∫–æ –º–Ω–µ –∏ –¥–∞–π –∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –∑–∞–ª–µ—Ç–∏—Ç!"""

    await message.answer(msg, reply_markup=btns)


@router_main.callback_query(F.data == 'flood')
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(User.wait_link_video)
    msg = "–£—Ä–∞! –û—á–µ–Ω—å —Ä–∞–¥ –∑–∞ —Ç–µ–±—è üíã\n\n–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç –∏ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—Å—ë —Å—É–ø–µ—Ä ‚Äî –Ω–∞—á–∏—Å–ª—è—Ç —Ç–µ–±–µ –±–∞–ª–ª—ã üòÆ‚Äçüí®"
    await callback.message.answer(msg, reply_markup=kb.single_back_btn)


@router_main.message(User.wait_link_video)
async def answer_message(message: types.Message, state: FSMContext, bot: Bot):
    await state.set_state(User.start)
    data_state = await state.get_data()
    sn = data_state['name_sn']
    link = data_state['link']
    link_video = message.text.replace('https://', '')
    result = await search_link_video(link_video)
    if not sn.lower() in link_video.lower():
        msg = """–£–ø—Å! –í–∏–¥–µ–æ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æüò≠\n\n–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –ø—Ä–∏—Å–ª–∞–ª–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞–Ω–µ–µ —Å–æ—Ü—Å–µ—Ç–∏ üîç"""
        await message.answer(msg)
    elif result:
        msg = """–£–ø—Å! –í–∏–¥–µ–æ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æüò≠\n\n–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ–±—ã —ç—Ç–∞ —Å—Å—ã–ª–∫–∞ –µ—â—ë –Ω–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–∞–Ω–µ–µ üîç"""
        await message.answer(msg)
    else:
        await add_link_video(message.from_user.id, link_video)
        msg = f"–¢–≤–æ—ë –≤–∏–¥–µ–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å ÁæÖÔèª"
        await message.answer(msg)

        msg = f"""
–í–∏–¥–µ–æ {sn} –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
{message.from_user.id}
{message.from_user.first_name}
{message.from_user.username}
–°—Å—ã–ª–∫–∞ –Ω–∞ {link}

{link_video}   
        """

        await bot.send_message(-4585659208,
                               msg,
                               reply_markup=kb.get_points_btn(message.from_user.id),
                               disable_web_page_preview=True)

    btns, check = await kb.get_sn_btn(message.from_user.id)

    msg = """–ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã ‚ú®"""

    await message.answer(msg, reply_markup=btns)


@router_main.callback_query(F.data.contains('points'))
async def answer_message(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    _, points, tg_id = callback.data.split('__')
    await callback.message.edit_reply_markup()
    if points == '0':
        msg = f"–í–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º"
        await bot.send_message(tg_id, msg)
    else:
        msg = f"–ú–æ–ª–æ–¥–µ—Ü! –¢–µ–±–µ —É–∂–µ –∑–∞—á–∏—Å–ª–∏–ª–∏ –±–∞–ª–ª—ã –∑–∞ —ç—Ç–æ—Ç –≤–∏–¥–æ—Å–∏–∫, –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å üòà"
        await bot.send_message(tg_id, msg)
        api.add_points(int(tg_id), int(points))


# ===========================================–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ —á–∞—Ç–∞========================================================

@router_main.message(F.forward_origin.chat.id == ID_CHANNEL)  # ID –ö–ê–ù–ê–õ–ê
async def answer_message(message: types.Message, state: FSMContext, bot: Bot):
    print("–ù–æ–≤—ã–π –ø–æ—Å—Ç")
    add_new_id_post(message.message_id)


@router_main.message(F.chat.id == ID_CHAT, F.text, F.reply_to_message, F.from_user.is_bot == False)  # ID –ß–ê–¢–ê
async def answer_message(message: types.Message, state: FSMContext, bot: Bot, arqredis: ArqRedis):
    user = await get_user(message.from_user.id)
    if (message.reply_to_message.forward_origin.message_id in list_channel_message) and user and not user.send_comment:
        await bot.send_message(message.from_user.id, "–¢—ã –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ–ª—É—á–∞–π 10 –±–∞–ª–ª–æ–≤")
        api.add_points(message.from_user.id, 10)
        await user_send_comment(message.from_user.id)
        await arqredis.enqueue_job(
            'reset_send_comment', _defer_by=timedelta(hours=1), telegram_id=message.from_user.id
        )